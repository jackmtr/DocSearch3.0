@model IPagedList<PublicVM>

<div id="public_table" class="row" data-currentRecord="@ViewData["currentRecordsCount"]">
    <div id ="public_table_inner" class="col-md-12">
        <table class="table table-bordered table-hover">
            <thead class="thead-default">
                <tr>
                    <th>
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "document"
                   }), "#public_table", "replace-with", "GET", "Type of Document", "fa-sort"))

                        <!--Works, but could be done better (custom extension method)-->
                        @*<a href="@Url.Action("Index", "PublicVM", new {
                                    publicId = Model.First().Folder_ID,
                                    filter = "document"})"
                            data-ajax-update="#public_table" 
                            data-ajax-mode="replace-with" 
                            data-ajax-method="GET" 
                            data-ajax="true">
                            Type of Document<i class="fa fa-sort"></i>
                        </a>*@

                        <!--Simplest, but couldnt add glphicons or font awesome-->
                        @*@Ajax.ActionLink("Type of Document", "Index", new
                        {
                            publicId = Model.First().Folder_ID,
                            filter = "document"
                        }, new AjaxOptions
                        {
                            HttpMethod = "GET",
                            InsertionMode = InsertionMode.ReplaceWith,
                            UpdateTargetId = "public_table"
                        })*@
                    </th>
                    <th>
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "issue"
                   }), "#public_table", "replace-with", "GET", "Issue Date", "fa-sort"))

                        @*@Ajax.ActionLink("Issue Date", "Index", new { publicId = Model.First().Folder_ID, filter = "issue" }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.ReplaceWith,
                       UpdateTargetId = "public_table"
                   })*@
                    </th>
                    <th>
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "effective"
                   }), "#public_table", "replace-with", "GET", "Effective Date", "fa-sort"))

                        @*@Ajax.ActionLink("Effective Date", "Index", new { publicId = Model.First().Folder_ID, filter = "effective" }, new AjaxOptions
                   {
                       HttpMethod = "GET",
                       InsertionMode = InsertionMode.ReplaceWith,
                       UpdateTargetId = "public_table"
                   })*@
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ToList().First().Description)
                    </th>
                    <th>File</th>
                    <th>...</th>
                </tr>
            </thead>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.DocumentTypeName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.IssueDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EffectiveDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.ActionLink(item.FileType, "FileDisplay", new { documentId = item.Document_ID }, new { target = "_blank" }) 
                        @if (item.FileType == "Picture JPEG") {
                            @Html.ActionLink("[Preview]", "FileDisplay", new { documentId = item.Document_ID }, new { @class = "preview", id = item.Document_ID})
                        }
                    </td>
                    <td>OPEN ME</td>
                </tr>
            }
        </table>

        <div class="pagedList col-md-6 col-md-offset-3" data-otf-target="#public_table">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, publicId = Model.First().Folder_ID, subNav = ViewData["currentNav"], prevNav = ViewData["currentNavTitle"]}),
            PagedListRenderOptions.MinimalWithItemCountText)
        </div>
    </div>

</div>

@if ((bool)ViewData["goodSearch"] == false)
{
    <script type="text/javascript">
                alert('Sorry, your search came up empty.  Clearing Search.');
    </script>
}