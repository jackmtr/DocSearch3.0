@model IPagedList<PublicVM>

@if ((bool)ViewData["goodSearch"] == false)
{
    <script type="text/javascript">
        //these functions should be synchronous, atm not
        clearFields();
        alert('Sorry, your search came up empty.  Clearing Search.');
    </script>
}

<div id="public_table" class="row default-table" data-currentRecord="@ViewData["currentRecordsCount"]" data-currentLowYear="@(((List<SelectListItem>)TempData["YearRange"]).First().Text)" data-currentHighYear ="@(((List<SelectListItem>)TempData["YearRange"]).Last().Text)">
    <div id ="public_table_inner" class="col-md-12">
        <table class="table table-bordered table-hover">
            <thead class="thead-default">
                <tr class="main-rows">
                    <th> <!--1-->
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "document",
                       subNav = ViewData["currentNav"],
                       prevNav = ViewData["currentNavTitle"],
                       searchTerm = TempData["SearchTerm"]
                   }), "#public_table", "replace-with", "GET", "Type of Document", "fa-sort", "filterLink", "postNavbar"))
                    </th>
                    <th> <!--2-->
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "issue",
                       subNav = ViewData["currentNav"],
                       prevNav = ViewData["currentNavTitle"],
                       searchTerm = TempData["SearchTerm"]
                   }), "#public_table", "replace-with", "GET", "Issue Date", "fa-sort", "filterLink", "postNavbar"))
                    </th>
                    <th>Method</th> <!--3-->
                    <th> <!--4-->
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                    {
                        publicId = Model.First().Folder_ID,
                        filter = "policy",
                        subNav = ViewData["currentNav"],
                        prevNav = ViewData["currentNavTitle"],
                        searchTerm = TempData["SearchTerm"]
                    }), "#public_table", "replace-with", "GET", "Policy #", "fa-sort", "filterLink", "postNavbar"))
                    </th> 
                    <th> <!--5-->
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                   {
                       publicId = Model.First().Folder_ID,
                       filter = "effective",
                       subNav = ViewData["currentNav"],
                       prevNav = ViewData["currentNavTitle"],
                       searchTerm = TempData["SearchTerm"]
                   }), "#public_table", "replace-with", "GET", "Effective Date", "fa-sort", "filterLink", "postNavbar"))
                    </th>
                    <th><!--6-->
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                    {
                        publicId = Model.First().Folder_ID,
                        filter = "originator",
                        subNav = ViewData["currentNav"],
                        prevNav = ViewData["currentNavTitle"],
                        searchTerm = TempData["SearchTerm"]
                    }), "#public_table", "replace-with", "GET", "Originator", "fa-sort", "filterLink", "postNavbar"))
                    </th>
                    <th>Reason</th><!--7-->
                    <th>
                        @Html.Raw(CustomLink.AjaxActionLinkWithFontAwesome(Url.Action("Index", "PublicVM", new
                    {
                        publicId = Model.First().Folder_ID,
                        filter = "supplier",
                        subNav = ViewData["currentNav"],
                        prevNav = ViewData["currentNavTitle"],
                        searchTerm = TempData["SearchTerm"]
                    }), "#public_table", "replace-with", "GET", "Supplier #", "fa-sort", "filterLink", "postNavbar"))
                    </th><!--8-->
                    <th><!--9-->
                        @Html.DisplayNameFor(model => model.ToList().First().Description)
                    </th>
                    <th>File</th><!--10-->
                    <th>Misc</th><!--11-->
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="main-rows">
                        <td>
                            @Html.DisplayFor(modelItem => item.DocumentTypeName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IssueDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Method)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.RefNumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EffectiveDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Originator)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Reason)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Supplier)
                        </td>
                        <td class="description">
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.ActionLink(item.FileType, "FileDisplay", new { documentId = item.Document_ID }, new { target = "_blank" })
                            @if (item.FileType == "Picture JPEG")
                            {
                                <div class="preview_image">
                                    @Html.ActionLink("[Preview]", "FileDisplay", new { documentId = item.Document_ID }, new { @class = "preview", id = item.Document_ID+'a' })
                                </div>
                            }
                        </td>
                        <td>
                            <a href="#" class="miscTableLink" method="get" action="@Url.Action("MiscData", new { documentId = item.Document_ID, subNav = ViewData["currentNav"], prevNav = ViewData["currentNavTitle"], })" data-otf-ajax="true" data-otf-target="#@item.Document_ID.ToString()">More<i class="fa fa-expand"></i></a>
                        </td>
                    </tr>
                    <tr class="misc_table" id="@item.Document_ID"></tr>
                }
            </tbody>
        </table>
        <div class="pagedList col-md-6 col-md-offset-3" data-otf-target="#public_table">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, publicId = Model.First().Folder_ID, subNav = ViewData["currentNav"], prevNav = ViewData["currentNavTitle"] }),
            PagedListRenderOptions.MinimalWithItemCountText)
        </div>
    </div>

</div>